package rs.ac.bg.etf.pp1;



import rs.ac.bg.etf.pp1.CounterVisitor.FormParamCounter;
import rs.ac.bg.etf.pp1.CounterVisitor.VarCounter;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.concepts.Obj;

public class CodeGenerator extends VisitorAdaptor {
	
	private int mainPc;
	
	public int getMainPc() {
		return mainPc;
	}
	
	
	
	// =========================================================
	// CONST
	// =========================================================
	
	public void visit(TypeOfConstK1 cnst) {
		Obj con = TabExtended.insert(Obj.Con, "$", cnst.struct);
		con.setLevel(0);
		con.setAdr(cnst.getVal());
		Code.load(con);
//		Code.loadConst(cnst.getVal());
	}
	
	public void visit(TypeOfConstK2 cnst) {
		Obj con = TabExtended.insert(Obj.Con, "$", cnst.struct);
		con.setLevel(0);
		con.setAdr(cnst.getVal());
		Code.load(con);
	}
	
	public void visit(TypeOfConstK3 cnst) {
		Obj con = TabExtended.insert(Obj.Con, "$", cnst.struct);
		con.setLevel(0);
		con.setAdr(cnst.getVal());
		Code.load(con);
	}
	
	
	

	
	// =========================================================
	// METHOD
	// =========================================================
	public void visit(MethodTypeNameK1 methodStart) {
		if("main".equalsIgnoreCase(methodStart.getMethName())) {
			mainPc = Code.pc;
		}
		methodStart.obj.setAdr(Code.pc);
		
//		SyntaxNode methodNode = methodStart.getParent();
//		VarCounter varCnt = new VarCounter();
//		methodNode.traverseTopDown(varCnt);
// 
//		FormParamCounter fpCnt = new FormParamCounter();
//		methodNode.traverseTopDown(fpCnt);
//		Code.put(Code.enter);
//		Code.put(fpCnt.getCount());
//		Code.put(fpCnt.getCount() + varCnt.getCount());
		
		int paramCount = methodStart.obj.getLevel();
		int paramAndLocalCount = methodStart.obj.getLocalSymbols().size();
		
		Code.put(Code.enter);
		Code.put(paramCount);
		Code.put(paramAndLocalCount);
	}
	
	public void visit(MethodDeclK1 methodEnd) {
		Code.put(Code.exit);
		Code.put(Code.return_);
	}
	
	
	public void visit(Designator des) {
		SyntaxNode parent = des.getParent();
		if(DesignatorStatementK1.class != parent.getClass()) {
			Code.load(des.obj);
		}
	}
	// =========================================================
	// STATEMENT
	// =========================================================
	public void visit(SingleStatementK2 read) {
		if(read.getDesignator().obj.getType() == TabExtended.intType)
			Code.put(Code.read);
		else
			Code.put(Code.bread);
		
		Code.store(read.getDesignator().obj);
	}
	
	public void visit(SingleStatementK3  print) {
		if(print.getExpression().struct == TabExtended.intType) {
			Code.loadConst(5);
			Code.put(Code.print);
		}else {
			Code.loadConst(1);
			Code.put(Code.bprint);
		}
	}
	
	public void visit(SingleStatementK4 print) {
		if(print.getExpression().struct == TabExtended.intType) {
			Code.loadConst(5);
			Code.put(Code.print);
		}else {
			Code.loadConst(1);
			Code.put(Code.bprint);
		}
	}
	
	
	
	// =========================================================
	// TERM
	// =========================================================	
	public void visit(MoreTerm term) {
		Mulop mulop =  term.getMulop();
		if(mulop instanceof MulopK1)
			Code.put(Code.mul);
		else if(mulop instanceof MulopK2)
			Code.put(Code.div);
		else
			Code.put(Code.rem);
	}
	
	// =========================================================
	// FACTOR
	// =========================================================
	public void visit(FactorK3 factor) {
		int type = (factor.getType().struct == TabExtended.charType) ? 0 : 1;
		Code.put(type);
		Code.put(Code.newarray);
	}
	
	// =========================================================
	// DESIGNATOR STATEMENT
	// =========================================================
	public void visit(DesignatorStatementK1 assign) {
		Code.store(assign.getDesignator().obj);
	}
	
	public void visit(DesignatorStatementK2 plusplus) {
		if(plusplus.getDesignator().obj.getKind() == Obj.Elem)
			Code.put(Code.dup2);
		// na steku se nalazi niz i index, pa to dupliramo 
		// pa se nalazi niz index niz index
		Code.load(plusplus.getDesignator().obj);
		Code.loadConst(1);
		Code.put(Code.add);
		Code.store(plusplus.getDesignator().obj);
	}
	
	public void visit(DesignatorStatementK3 minusminus) {
		if(minusminus.getDesignator().obj.getKind() == Obj.Elem)
			Code.put(Code.dup2);
		Code.load(minusminus.getDesignator().obj);
		Code.loadConst(1);
		Code.put(Code.sub);
		Code.store(minusminus.getDesignator().obj);
	}

}
